# Suite of functions to parse word lists

def load_period(period): 
    """ load the xml file with the data """
    period_file = period + '.xml'
    data_dir = "/Users/nernst/Documents/papers/current-papers/abram/naming-paper/data/maxdb-tagged/"
    
    import lxml.etree
    doc = lxml.etree.parse(data_dir + period_file)
    topics = doc.findall('Topic')
    #spme test establishing correct number
    return topics
    
def load_wordlists(): 
    """ load the datafile with the wordlists we want to use """
    exp = '../exp2/'
    quality_map = {'portability':[], 'efficiency':[], 'reliability':[], 'functionality':[], 'usability':[], 'maintainability':[]}
    for q in quality_map.keys():
        q_file = open(exp + 'wordlist.' + q)
        for line in q_file:
            quality_map[q].append(line.rstrip())
    return quality_map
    
def create_element_list(topic):
    """Parse each period and create a list of elements and annotations in that topic, 
    to some threshold. arg topic is an ElementTree Element"""
    threshold = -99.0
    annotations = []
    thresh_el = [] # the list of elements 'above' the threshold
    import re
    url = re.compile('http:\/\/.*') # this will parse out (some) urls 
    elements = topic.findall('Elements/Elm') # should use some sort of comprehension here to filter on threshold
    for elm in elements:
        if float(elm.attrib['freq']) > threshold and url.match(elm.attrib['word']) == None:
            thresh_el.append(elm.attrib['word'])
    
    anno = topic.findall('Annotation')
    for a in anno:
        annotations.append(a.attrib['name'])
    return annotations, thresh_el
    
def index_matching_wordlists():
    """"""
# Create 2-d arrays of periods to qualities (24 periods and 6 qualities). 
#Each map contains a count of number of topics in that period that contained that quality.
# For each period;
#   for each wordlist
#       check the list of elements against the words in the topic list 
#       If match, increment count for that quality/period cell.

def compare_results():
    """"""
    # Create a list of annotations indexed to period/topic.
# Compare the annotation qualities per period/topic to the list generated by lda.

if __name__ == '__main__':
    maxdb_periods = ["1088563753", "1098931753",  "1109299753",  "1119667753",  "1132627753",  "1142995753", 
"1091155753",  "1101523753",  "1111891753",  "1122259753",  "1135219753",  "1145587753", 
"1093747753",  "1104115753",  "1114483753",  "1124851753",  "1137811753",  "1148179753", 
"1096339753",  "1106707753",  "1117075753",  "1130035753",  "1140403753",  "1150771753"]
    test_period = '1098931753'
    topics = load_period(test_period)
    load_wordlists()
    # for t in topics:
    create_element_list(topics[0])
    #for period in maxdb_periods:
    #    load_period(period)