# Suite of functions to parse word lists

def load_period(): 
    """ load the xml file with the data """
    svg_file = 'images/test-image.svg'
    out_file = 'images/test-prettier.svg'
    xsl_file = 'notugly.xsl'

    import lxml.etree
    styledoc = lxml.etree.parse(xsl_file)
    transform = lxml.etree.XSLT(styledoc)
    doc = lxml.etree.parse(svg_file)
    result_tree = transform(doc)
    result_tree.write(out_file, encoding='UTF-8')  
    
def load_wordlists(): 
    """ load the datafile with the wordlists we want to use """
    
def create_element_list():
    Parse each period and create a list of elements in that topic, to some threshold.

def index_matching_wordlists():
    """"""
Create 2-d arrays of periods to qualities (24 periods and 6 qualities). Each map contains a count of number of topics in that period that contained that quality.
For each period;
	for each wordlist
		check the list of elements against the words in the topic list 
		If match, increment count for that quality/period cell.

def compare_results():
Create a list of annotations indexed to period/topic.
Compare the annotation qualities per period/topic to the list generated by lda.

if __name__ == '__main__':
    periods = []
    load_period(period)